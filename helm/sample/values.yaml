# K8S Service definition
service:
  # k8s Service spec type
  type: ClusterIP
  # k8s spec ports
  ports:
    # public API port
    public: 8080
  # List of additional selectors
  selectors: {}

# Optional list of ports that will be exposed on the application container ADDITIONALLY to the ports specified
# by the service.ports
containerPorts: []

# Container liveness probe
containerLivenessProbe:
  # Determines if Liveness proble enabled
  enabled: true
  # Number of requests that should be failed in order to treat container unhealthy
  failureThreshold: 5
  # Number of seconds between requests
  periodSeconds: 15

# Public API path prefix (routes start from), e.g. /hasher/...
appApiPathPrefix: "hasher"

# MySQL administrator credentials
# This user is used in order to perform tasks related to initialization such as for example
# creating DB schema (see hooks.dbInit)
mysqlAdmin:
  user: ""
  password: ""

# Provides possibility to manage hooks
hooks:
  # Enables a hook that creates database schema and user.
  # Provided DB user must have appropriate files.
  # Database host and the schema name are taken from appEnv.dbHost and appEnv.dbName
  dbInit:
    enabled: false
    # Create db schema
    createSchema: true
    # Create db user
    createUser: true

# Ingress resource specification
ingress:
  # Determines whether to include ingress resource
  enabled: false
  # Ingress annotations
  annotations:
    kubernetes.io/ingress.class: nginx
  # TLS connection parameters
  tls:
    # Should the TLS be enabled
    enabled: false
    # If tls.enabled is true, then host is required e.g. example.com
    host: ""
    # Secret name where certificate is stored !NOTE: secret must be in exactly the same namespace as ingress controller
    secretName: ""

# Application environment variables
appEnv:
  # DB_HOST
  dbHost: "mysql"
  # DB_PORT
  dbPort: "3306"
  # DB_USER
  # This value is also used by hooks.dbInit
  dbUser: ""
  # DB_PASS
  # This value is also used by hooks.dbInit
  dbPass: ""
  # DB_NAME
  dbName: "hasher"
  # DB_IS_DEBUG_MODE
  dbDebugMode: false

# Default values for go-hasher.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # Overrides the image repository whose default is the chart name prefixed by "scnsoft/"
  repository: "scnsoft/go-hasher"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
